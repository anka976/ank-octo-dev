apply plugin: 'war'
apply plugin: 'maven'
apply plugin: "sonar"
apply plugin: "eclipse"

group='de.wps.usermanagement'
version = '0.1.0'

sourceCompatibility = 1.6
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
		maven {
			credentials {
				username 'wpsadmin'
				password 'VBs3cr3!'
			}
			url 'https://artifacts.westernacher.com/artifactory/aggregated-releases'
		}
		maven {
			credentials {
				username 'wpsadmin'
				password 'VBs3cr3!'
			}
			url 'https://artifacts.westernacher.com/artifactory/aggregated-snapshots'
		}
}

configurations.all {
	transitive = true
}

configurations {
	integration
	candidate
	release
}

dependencies {
	testCompile 'junit:junit:4.8.2'
	testCompile 'com.jayway.restassured:rest-assured:1.6.2'
	testCompile 'org.springframework:spring-test:3.0.6.RELEASE'
    testCompile 'org.apache.tomcat:servlet-api:6.0.35'
    testCompile group: 'org.springframework', name: 'spring-webmvc', version: '3.0.6.RELEASE'
	testCompile 'org.easymock:easymock:3.1'
    testCompile 'com.google.code.gson:gson:2.1'
    testCompile group: 'net.sf.json-lib', name:'json-lib', version:'2.2.3'
    testRuntime 'javax.annotation:jsr250-api:1.0'
    
	compile group: 'org.springframework.security', name: 'spring-security-ldap', version: '3.0.6.RELEASE'
	compile group: 'org.springframework.ldap', name: 'spring-ldap-core-tiger', version: '1.3.1.RELEASE'
	compile(group: 'org.springframework.ldap', name: 'spring-ldap-core', version: '1.3.1.RELEASE'){
		exclude group: 'commons-logging'
	}
	compile group: 'org.springframework.ldap', name: 'spring-ldap-odm', version: '1.3.1.RELEASE'
	compile group: 'org.springframework', name: 'spring-web', version: '3.0.6.RELEASE'
	compile group: 'org.springframework', name: 'spring-context-support', version: '3.0.6.RELEASE'
	compile( group: 'org.springframework.security', name:'spring-security-core', version: '3.0.6.RELEASE'){
		exclude group: 'commons-logging'
	}
    compile group: 'com.googlecode.ehcache-spring-annotations', name: 'ehcache-spring-annotations', version: '1.2.0'
    compile group: 'org.codehaus.jackson', name: 'jackson-core-asl', version: '1.8.5'
    compile group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.8.5'
    
    runtime group: 'org.springframework', name: 'spring-webmvc', version: '3.0.6.RELEASE'
	runtime group: 'ch.qos.logback', name: 'logback-classic', version: '1.0.0'
	runtime group: 'javax.annotation', name: 'jsr250-api', version: '1.0'
	runtime group: 'org.springframework.security', name: 'spring-security-config', version: '3.0.6.RELEASE'
	runtime( group: 'org.springframework.security', name:'spring-security-web', version: '3.0.6.RELEASE'){
		exclude group: 'commons-logging'
	}
}

war {
	version = version + "-SNAPSHOT"
	manifest {
		attributes 'Implementation-Title': 'UserManagement-DevelopmentBuild', 'Implementation-Version': version
	}
	baseName = 'usermanagement-devel'
	webInf {
		into('classes') {
			from 'config/devel'
		}
		into ('') {
			from 'src/main/schemas'
		}
	}
}

task integrationBuild(type: War) {
	// remove all classes and resources from the classpath
	classpath = configurations.runtime.filter{file ->
		 !configurations.providedRuntime.contains(file)
	}

	// add them in explicitly, with the filtering applied
	webInf {
		into('classes') {
			from sourceSets.main.output.classesDir
			from sourceSets.main.output.resourcesDir
			from 'config/ci'
		}
		into ('') {
			from 'src/main/schemas'
		}
	}
	manifest {
		attributes 'Implementation-Title': 'usermanagement-integration', 'Implementation-Version': version
	}
	baseName = 'usermanagement'
}

task releaseWar(type: War) {
	// remove all classes and resources from the classpath
	classpath = configurations.runtime.filter{file ->
		 !configurations.providedCompile.contains(file)
	}

	// add them in explicitly, with the filtering applied
	webInf {
		from 'resources/webapp'
		into('classes') {
			from sourceSets.main.output.classesDir
			from sourceSets.main.output.resourcesDir
		}
		into ('') {
			from 'src/main/schemas'
		}
	}
	manifest {
		attributes 'Implementation-Title': 'usermanagement', 'Implementation-Version': version
	}
	baseName = 'usermanagement'
}

task releaseBuild(dependsOn: 'releaseWar', type: Zip) {
	from 'config/ci'
	baseName = 'usermanagement-shared'
	destinationDir file('build/libs')
}

task deployLocal(dependsOn: 'war') << {
    delete {
        "${tomcatHome}/webapps/usermanagement/"
    }
	copy {
		from war.archivePath
		into "${tomcatHome}/webapps"
		rename {
			'usermanagement.war'
		}
	}
}

artifacts {
	integration file('build/libs/usermanagement-' + version + '.war')
	candidate file('build/libs/usermanagement-shared-' + version + '.zip'), file('build/libs/usermanagement-' + version + '.war')
	release file('build/libs/usermanagement-shared-' + version + '.zip'), file('build/libs/usermanagement-' + version + '.war')
}

uploadIntegration{
	repositories {
		mavenDeployer {
			snapshotRepository(url: 'https://artifacts.westernacher.com/artifactory/inhouse-snapshots'){
				authentication(userName: "wpsadmin", password: "VBs3cr3!")
				addFilter('usermanagementwar') {artifact, file ->
					artifact.name == 'usermanagement'
				}
				addFilter('sharedZip') {artifact, file ->
					artifact.name == 'usermanagement-shared'
				}
			}
			pom('usermanagementwar').version = project.version + '-SNAPSHOT'
		}
	}
}

uploadCandidate{
	repositories {
		mavenDeployer {
			repository(url: "https://artifacts.westernacher.com/artifactory/inhouse-releases") {
				authentication(userName: "wpsadmin", password: "VBs3cr3!")
				addFilter('usermanagementwar') {artifact, file ->
					artifact.name == 'usermanagement'
				}
				addFilter('sharedZip') {artifact, file ->
					artifact.name == 'usermanagement-shared'
				}
			}
			pom('usermanagementwar').version = project.version + '-RC'
			pom('sharedZip').version =  project.version + '-RC'
		}
	}
}

uploadRelease{
	repositories {
		mavenDeployer {
			repository(url: "https://artifacts.westernacher.com/artifactory/inhouse-releases") {
				authentication(userName: "wpsadmin", password: "VBs3cr3!")
				addFilter('usermanagementwar') {artifact, file ->
					artifact.name == 'usermanagement'
				}
				addFilter('sharedZip') {artifact, file ->
					artifact.name == 'usermanagement-shared'
				}
			}
			pom('usermanagementwar').version = project.version 
			pom('sharedZip').version =  project.version
		}
	}
}

/* Task to run Chef deployment command  */
task deployWithChef(type:Exec) {
	workingDir './'
	commandLine '/usr/bin/sudo', '/usr/bin/chef-client', '-j', 'userManagement.json'
}

sonar {
	project {
		name = 'User Management Component'
	}
	server {
		url = 'http://109.75.186.201:9000/'
	}
	database {
			url = "jdbc:mysql://109.75.186.201:3306/sonar"
			driverClassName = "com.mysql.jdbc.Driver"
			username = "sonar"
			password = "SonarOpenSource235#!"
	}
}